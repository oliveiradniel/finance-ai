"user server";

import OpenAi from "openai";

import { redirect } from "next/navigation";

import { auth, clerkClient } from "@clerk/nextjs/server";

import { db } from "@/app/_lib/prismaClient";

import { GenerateAiReportSchema, generateAiReportSchema } from "./schema";

export async function generateAiReport({ month }: GenerateAiReportSchema) {
  generateAiReportSchema.parse({ month });

  const { userId } = await auth();
  if (!userId) {
    redirect("/login");
  }

  const user = (await clerkClient()).users.getUser(userId);
  const hasPremiumPlan =
    (await user).publicMetadata.subscriptionPlan === "premium";
  if (!hasPremiumPlan) {
    throw new Error("You need a premium plan to generate AI reports");
  }

  const openAi = new OpenAi({
    apiKey: process.env.OPENAI_API_KEY,
  });

  // get the transactions of the month received
  const transactions = await db.transaction.findMany({
    where: {
      date: {
        gte: new Date(`2025-${month}-01`),
        lt: new Date(`2025-${month}-31`),
      },
    },
  });

  // send the transactions to chatGPT and ask it to generate the report with insights
  const content = `Gere um relatório com insights sobre as minhas finanças, com dicas e orientações de como melhorar minha vida financeira. As transações estão divididas por ponto e virgula. A estrutura de cada uma é {DATA}-{TIPO}-{VALOR}-{CATEGORIA}. São elas:
  ${transactions
    .map(
      (transaction) =>
        `${transaction.date.toLocaleDateString("pt-BR")}-R$${transaction.amount}-${transaction.type}-${transaction.category}`,
    )
    .join(";")}
  `;

  const completion = await openAi.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      {
        role: "system",
        content:
          "Você é um especialista em gestão e organização de finanças pessoais. Você ajuda as pessoas a organizarem melhor as suas finanças.",
      },
      {
        role: "user",
        content,
      },
    ],
  });

  // get the report generated by chatGPT and send it to the user
  return completion.choices[0].message.content;
}
